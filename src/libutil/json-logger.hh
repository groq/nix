#include "logging.hh"
#include "util.hh"

#include <nlohmann/json.hpp>

namespace nix {

/**
 *
 * A special Logger instance that outputs a structured log.
 * This log can then be parsed-pack by ::handleJSONLogMessage
 */
class JSONLogger : public Logger {

  public:
    Logger &prevLogger;

    JSONLogger(Logger &prevLogger);

    JSONLogger();

    void addFields(nlohmann::json &json, const Fields &fields);

    void write(const nlohmann::json &json);

    void log(Verbosity lvl, const FormatOrString &fs);

    virtual void startActivity(ActivityId act, Verbosity lvl, ActivityType type,
                               const std::string &s, const Fields &fields,
                               ActivityId parent);

    virtual void stopActivity(ActivityId act);

    virtual void result(ActivityId act, ResultType type, const Fields &fields);
};

/**
 * Parse a log message generated by the JSONLogger Logger to reconstruct the
 * state of the activity.
 *
 * This is used for internal ipc communication so that the parent nix process
 * can be aware of what's going on in its childs.
 */
bool handleJSONLogMessage(const std::string &msg, const Activity &act,
                          std::map<ActivityId, Activity> &activities,
                          bool trusted);

} // namespace nix
